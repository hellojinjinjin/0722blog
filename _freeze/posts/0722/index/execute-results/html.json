{
  "hash": "3cc1209fcec681a0516b2faf19d2902a",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"0722\"\nauthor: \"j\"\ndate: now\ncategories: [python] \n---\n\n# \\[실습\\] 날짜형, 문자형 다루기 연습 - 자전거 시스템의 대여 기록\n\n::: {#92b4911e .cell execution_count=1}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\nprint(df.head())\n\ndf.head(2)\ndf.info()\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              datetime  season  holiday  workingday  weather   temp   atemp  \\\n0  2011-09-05 17:00:00       3        1           0        2  27.06  29.545   \n1  2011-05-17 11:00:00       2        0           1        2  22.96  26.515   \n2  2011-11-10 09:00:00       4        0           1        2  17.22  21.210   \n3  2011-10-13 07:00:00       4        0           1        3  22.14  25.760   \n4  2011-10-15 14:00:00       4        0           0        1  24.60  31.060   \n\n   humidity  windspeed  casual  registered  count  \n0        89     7.0015      37          77    114  \n1        83    27.9993      26         104    130  \n2        94     7.0015      23         188    211  \n3       100     8.9981       5          76     81  \n4        33    31.0009     242         230    472  \n<class 'pandas.core.frame.DataFrame'>\nRangeIndex: 435 entries, 0 to 434\nData columns (total 12 columns):\n #   Column      Non-Null Count  Dtype  \n---  ------      --------------  -----  \n 0   datetime    435 non-null    object \n 1   season      435 non-null    int64  \n 2   holiday     435 non-null    int64  \n 3   workingday  435 non-null    int64  \n 4   weather     435 non-null    int64  \n 5   temp        435 non-null    float64\n 6   atemp       435 non-null    float64\n 7   humidity    435 non-null    int64  \n 8   windspeed   435 non-null    float64\n 9   casual      435 non-null    int64  \n 10  registered  435 non-null    int64  \n 11  count       435 non-null    int64  \ndtypes: float64(3), int64(8), object(1)\nmemory usage: 40.9+ KB\n```\n:::\n:::\n\n\n### 1. 계절(season) == 1일 때, 가장 대여량이 많은 시간대(hour)을 구하시오.\n\n::: {#ab6f4280 .cell execution_count=2}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\nspring = df['season'] == 1\nspring_count = df[spring][['datetime','count']]\n\nspring_count['datetime'].dt.hour\ndf['hour'] = df['datetime'].dt.hour\nspring_count = df[spring][['hour','count']]\n\nhour_count = spring_count.groupby('hour')['count'].sum()\n\nhour_count.idxmax()     # 가장 높은 대여량 시간\nhour_count.max()      # 가장 높은 대여량\n\n# 최대 count 행\ncount_max = spring_count.loc[spring_count['count'].idxmax()]\n\ncount_max['hour']\ncount_max['count']\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```\n597\n```\n:::\n:::\n\n\n### 2. 각 계절(season)별 평균 대여량(count)을 구하시오.\n\n::: {#322a84cf .cell execution_count=3}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\n\ndf.groupby('season')['count'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```\nseason\n1    103.169811\n2    218.803922\n3    265.500000\n4    218.581197\nName: count, dtype: float64\n```\n:::\n:::\n\n\n### 3. 특정 달(month) 동안의 총 대여량(count)을 구하시오.\n\n::: {#7d71425f .cell execution_count=4}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\ndf['month'] = df['datetime'].dt.month\n\nmonth_count = df[['month','count']]\n\nmonth_count.groupby('month')['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\nmonth\n1      2567\n2      4849\n3      3520\n4      5911\n5     10082\n6      6325\n7      8517\n8     10480\n9     10208\n10    10574\n11     6631\n12     8369\nName: count, dtype: int64\n```\n:::\n:::\n\n\n### 4. 가장 대여량이 많은 날짜를 구하시오.\n\n::: {#8f6a925a .cell execution_count=5}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\ndf['date'] = df['datetime'].dt.date\n\ndate_count = df.groupby('date')['count'].sum()\n\ndf.loc[df['date'] == date_count.idxmax()]\ndate_count.max()\n```\n\n::: {.cell-output .cell-output-display execution_count=5}\n```\n1398\n```\n:::\n:::\n\n\n### 5. 시간대(hour)별 평균 대여량(count)을 구하시오.\n\n::: {#c0881a50 .cell execution_count=6}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\ndf['hour'] = df['datetime'].dt.hour\ndf.groupby('hour')['count'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nhour\n0      43.500000\n1      52.714286\n2      32.842105\n3      12.000000\n4       6.687500\n5      17.750000\n6      58.705882\n7     208.937500\n8     483.055556\n9     260.117647\n10    144.130435\n11    182.000000\n12    277.533333\n13    290.600000\n14    266.842105\n15    255.666667\n16    373.052632\n17    519.200000\n18    447.769231\n19    322.103448\n20    210.083333\n21    196.619048\n22    113.560000\n23     77.352941\nName: count, dtype: float64\n```\n:::\n:::\n\n\n### 6. 특정 요일(weekday) 동안의 총 대여량(count)을 구하시오.\n\n::: {#7edf1daa .cell execution_count=7}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\nweekday = df['workingday'] == 1\n\n\ndf[weekday]['count'].sum()\n\ndf['weekday'] = df['datetime'].dt.day_name()\n\ndf[df['weekday'] == 'Monday']['count'].sum()\ndf[df['weekday'] == 'Tuesday']['count'].sum()\ndf[df['weekday'] == 'Wednesday']['count'].sum()\ndf[df['weekday'] == 'Thursday']['count'].sum()\ndf[df['weekday'] == 'Friday']['count'].sum()\n```\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n16315\n```\n:::\n:::\n\n\n### 7. 주어진 Bike Sharing 데이터를 사용하여 넓은 형식(wide format)에서 긴 형식(long format)으로 변환하시오. casual과 registered 열을 하나의 열로 변환하고, 각 기록의 대여 유형과 대여 수를 포함하는 긴 형식 데이터프레임을 만드시오.\n\n### melt를 사용하여 변환된 데이터프레임:\n\n::: {#5c7a4b46 .cell execution_count=8}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\npd.melt(df,\n        id_vars = ['datetime', 'season'],\n        value_vars= ['casual', 'registered'],\n        var_name='user_type',\n        value_name='user_count'\n       )\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>datetime</th>\n      <th>season</th>\n      <th>user_type</th>\n      <th>user_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>2011-09-05 17:00:00</td>\n      <td>3</td>\n      <td>casual</td>\n      <td>37</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2011-05-17 11:00:00</td>\n      <td>2</td>\n      <td>casual</td>\n      <td>26</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>2011-11-10 09:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>23</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>2011-10-13 07:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>5</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>2011-10-15 14:00:00</td>\n      <td>4</td>\n      <td>casual</td>\n      <td>242</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>865</th>\n      <td>2011-04-07 16:00:00</td>\n      <td>2</td>\n      <td>registered</td>\n      <td>161</td>\n    </tr>\n    <tr>\n      <th>866</th>\n      <td>2011-09-03 22:00:00</td>\n      <td>3</td>\n      <td>registered</td>\n      <td>96</td>\n    </tr>\n    <tr>\n      <th>867</th>\n      <td>2011-11-12 22:00:00</td>\n      <td>4</td>\n      <td>registered</td>\n      <td>88</td>\n    </tr>\n    <tr>\n      <th>868</th>\n      <td>2012-04-11 23:00:00</td>\n      <td>2</td>\n      <td>registered</td>\n      <td>52</td>\n    </tr>\n    <tr>\n      <th>869</th>\n      <td>2012-01-06 09:00:00</td>\n      <td>1</td>\n      <td>registered</td>\n      <td>237</td>\n    </tr>\n  </tbody>\n</table>\n<p>870 rows × 4 columns</p>\n</div>\n```\n:::\n:::\n\n\n### 8. 이전에 생성한 긴 형식 데이터프레임을 활용하여 각 계절(season)별로 casual과 registered 사용자의 평균 대여 수(count)를 구하시오.\n\n### 각 계절별 user_type의 평균 대여 수:\n\n::: {#7f1cd3cb .cell execution_count=9}\n``` {.python .cell-code}\nimport numpy as np\nimport pandas as pd\n\ndf = pd.read_csv('./data/bike_data.csv')\n\ndf = df.astype({'datetime' : 'datetime64[ns]', 'weather' : 'int64', \n                'season' : 'object', 'workingday' : 'object', \n                'holiday' : 'object'})\n\nuser_type = pd.melt(df, \n                    id_vars = ['datetime', 'season'],\n                    value_vars= ['casual', 'registered'],\n                    var_name='user_type',\n                    value_name='user_count'\n                    )\n\nuser_type.groupby(['season', 'user_type'])['user_count'].mean()\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\nseason  user_type \n1       casual         14.122642\n        registered     89.047170\n2       casual         48.990196\n        registered    169.813725\n3       casual         55.127273\n        registered    210.372727\n4       casual         29.709402\n        registered    188.871795\nName: user_count, dtype: float64\n```\n:::\n:::\n\n\n..\n\n",
    "supporting": [
      "index_files"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\" data-relocate-top=\"true\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n"
      ]
    }
  }
}